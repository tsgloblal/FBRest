// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"sync"

	"github.com/fizzbuzz/internal/models"
	"github.com/fizzbuzz/internal/services"
)

// Ensure, that ServiceMock does implement services.Service.
// If this is not the case, regenerate this file with moq.
var _ services.Service = &ServiceMock{}

// ServiceMock is a mock implementation of services.Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked services.Service
//		mockedService := &ServiceMock{
//			GetFizzBuzzFunc: func(ctx context.Context, fizzBuzz models.FizzBuzz) (string, error) {
//				panic("mock out the GetFizzBuzz method")
//			},
//			GetStatsFunc: func(ctx context.Context) (models.FizzBuzzRequest, error) {
//				panic("mock out the GetStats method")
//			},
//		}
//
//		// use mockedService in code that requires services.Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// GetFizzBuzzFunc mocks the GetFizzBuzz method.
	GetFizzBuzzFunc func(ctx context.Context, fizzBuzz models.FizzBuzz) (string, error)

	// GetStatsFunc mocks the GetStats method.
	GetStatsFunc func(ctx context.Context) (models.FizzBuzzRequest, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetFizzBuzz holds details about calls to the GetFizzBuzz method.
		GetFizzBuzz []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// FizzBuzz is the fizzBuzz argument value.
			FizzBuzz models.FizzBuzz
		}
		// GetStats holds details about calls to the GetStats method.
		GetStats []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
	}
	lockGetFizzBuzz sync.RWMutex
	lockGetStats    sync.RWMutex
}

// GetFizzBuzz calls GetFizzBuzzFunc.
func (mock *ServiceMock) GetFizzBuzz(ctx context.Context, fizzBuzz models.FizzBuzz) (string, error) {
	if mock.GetFizzBuzzFunc == nil {
		panic("ServiceMock.GetFizzBuzzFunc: method is nil but Service.GetFizzBuzz was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		FizzBuzz models.FizzBuzz
	}{
		Ctx:      ctx,
		FizzBuzz: fizzBuzz,
	}
	mock.lockGetFizzBuzz.Lock()
	mock.calls.GetFizzBuzz = append(mock.calls.GetFizzBuzz, callInfo)
	mock.lockGetFizzBuzz.Unlock()
	return mock.GetFizzBuzzFunc(ctx, fizzBuzz)
}

// GetFizzBuzzCalls gets all the calls that were made to GetFizzBuzz.
// Check the length with:
//
//	len(mockedService.GetFizzBuzzCalls())
func (mock *ServiceMock) GetFizzBuzzCalls() []struct {
	Ctx      context.Context
	FizzBuzz models.FizzBuzz
} {
	var calls []struct {
		Ctx      context.Context
		FizzBuzz models.FizzBuzz
	}
	mock.lockGetFizzBuzz.RLock()
	calls = mock.calls.GetFizzBuzz
	mock.lockGetFizzBuzz.RUnlock()
	return calls
}

// GetStats calls GetStatsFunc.
func (mock *ServiceMock) GetStats(ctx context.Context) (models.FizzBuzzRequest, error) {
	if mock.GetStatsFunc == nil {
		panic("ServiceMock.GetStatsFunc: method is nil but Service.GetStats was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockGetStats.Lock()
	mock.calls.GetStats = append(mock.calls.GetStats, callInfo)
	mock.lockGetStats.Unlock()
	return mock.GetStatsFunc(ctx)
}

// GetStatsCalls gets all the calls that were made to GetStats.
// Check the length with:
//
//	len(mockedService.GetStatsCalls())
func (mock *ServiceMock) GetStatsCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockGetStats.RLock()
	calls = mock.calls.GetStats
	mock.lockGetStats.RUnlock()
	return calls
}
